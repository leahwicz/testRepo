# **what?**
# When a PR is merged, if it has the backport label, it will create
# a new PR to backport those changes to the given branch. If it can't
# cleanly do a backport, it will comment on the merged PR of the failure.
#
# Label naming convention: "backport <branch name to backport to>"
# Example: backport 1.0.latest
#
# You MUST "Squash and merge" the original PR or this won't work.

# **why?**
# Changes sometimes need to be backported to release branches.
# This automates the backporting process

# **when?**
# Once a PR is "Squash and merge"'d and it has been correctly labeled
# according to the naming convention.

name: Backport
on:
  pull_request:
    types:
      - closed
      - labeled

permissions:
  contents: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: "here"
      run: |
        echo "merged: ${{github.event.pull_request.merged}}"
        echo "merged: ${{github.event.pull_request.merged}}"
    
  backport:
    name: Backport
    runs-on: ubuntu-latest
    # Only react to merged PRs for security reasons.
    # See https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target.
    if: >
      github.event.pull_request.merged
      && (
        github.event.action == 'closed'
        || (
          github.event.action == 'labeled'
          && contains(github.event.label.name, 'backport')
        )
      )
    steps:
      - uses: tibdex/backport@v2.0.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
